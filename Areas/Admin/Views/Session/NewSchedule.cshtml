@model InstantTutors.Areas.Admin.ViewModels.AdminSessionViewModel

@{
    ViewBag.Title = Model.Id > 0 ? "Edit Schedule" : "Schedule A Session";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            @using (Html.BeginForm("SelectTiming", "Session", new { area = "admin" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" ,@autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <br />
                @Html.Raw(@ViewBag.success)
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.UserId)
                @Html.HiddenFor(model => model.User.FirstName)
                @Html.HiddenFor(model => model.User.LastName)
                @Html.HiddenFor(model => model.User.Email)
                @Html.HiddenFor(model => model.User.PhoneNumber)
                @*@Html.HiddenFor(model => model.CommunicationMethod)*@
                <h4>@ViewBag.Title</h4>
                <p><small>All Tutoring Sessions will be conducted by extremely qualified high school students or professionals.</small></p>
                <hr />
                <div class="row">
                    <div class="col-12 col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Title) } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Tutor, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @if (Model.IsRequestComingFromTutor)
                                {
                                    @Html.DropDownListFor(m => m.Tutor, Model.Tutors, new { @disabled = "disabled", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Tutor, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Tutor)
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.Tutor, Model.Tutors, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Tutor, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Student, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @if (Model.IsRequestComingFromTutor)
                                {
                                    @Html.DropDownListFor(m => m.Student, Model.Students, new { @disabled = "disabled", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Student, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Student)
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.Student, Model.Students, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Student, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-5">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CommunicationMethod, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                <label class="radio-check">
                                    Text
                                    @Html.RadioButtonFor(m => m.CommunicationMethod, "Text", new { @class = "grade form-control" })
                                    <span class="checkmark"></span>
                                </label>
                                <label class="radio-check">
                                    Email
                                    @Html.RadioButtonFor(m => m.CommunicationMethod, "Email", new { @class = "grade form-control" })
                                    <span class="checkmark"></span>
                                </label>
                                <label class="radio-check">
                                    Call
                                    @Html.RadioButtonFor(m => m.CommunicationMethod, "Call", new { @class = "grade form-control" })
                                    <span class="checkmark"></span>
                                </label>
                                <label class="radio-check">
                                    All of the above
                                    @Html.RadioButtonFor(m => m.CommunicationMethod, "All of the above", new { @class = "grade form-control" })
                                    <span class="checkmark"></span>
                                </label>

                                @Html.ValidationMessageFor(model => model.CommunicationMethod, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-7">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @Html.TextAreaFor(model => model.Description, 5, 100, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Description) })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-5">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @if ((Model.CreatedBy != Model.UserId) && Model.CreatedBy != null)
                                {
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control", placeholder = Html.DisplayNameFor(n => n.StartDate) } })
                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.StartDate)
                                }
                                else
                                {
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.StartDate) } })
                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })

                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-7">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label lbl-required col-12 px-0" })
                            <div class="col-12 px-0">
                                @if ((Model.CreatedBy != Model.UserId) && Model.CreatedBy != null)
                                {
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control", placeholder = Html.DisplayNameFor(n => n.EndDate) } })
                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.EndDate)
                                }
                                else
                                {
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.EndDate) } })
                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })

                                }
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="col-12">
                        <div class="form-group"ng- style="min-height:150px;">
                            <div class="col-md-offset-2 col-md-10 px-0">
                                @if (Model.Id > 0)
                                {
                                    <input type="submit" value="View Timing" class="btn btn-success btn-lg" onclick="this.disabled=true;this.form.submit();" />
                                }
                                else
                                {
                                    <input type="submit" value="Select Timing" class="btn btn-success btn-lg" onclick="this.disabled=true;this.form.submit();" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }

        </div>
    </div>
</div>
<style>

    @@media only screen and (max-width: 767px) {
        h3.head_title {
            font-size: 20px;
        }
    }
